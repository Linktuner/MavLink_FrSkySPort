{"name":"Mavlink frsky telemetry sport","tagline":"","body":"MavLink_FrSkySPort\r\n==================\r\nThis is a modified version of the mavlink to frsky s.port code found here:\r\nhttp://diydrones.com/forum/topics/amp-to-frsky-x8r-sport-converter\r\n\r\nIt's based on the official 1.3 version.\r\n\r\nYou'll need a Flight Controller that outputs Mavlink messages (like an APM 2.x or the PixHawk), a compatible X series receiver from FrSky that can output Smart Port telemetry data, like the X8R, and a Teensy 3.1 micro controller. And a FrSky radio transmitter (like the Taranis X9D).\r\n\r\nIt's assumed you know how to configure your Taranis X9D to receive telemetry data.\r\n\r\nMost of the parameters can be read on the Taranis telemetry default screens, but some telemetry scripts have been added.\r\n\r\nAll testing is being done on a PixHawk flight controller, a Teensy 3.1, a X8R receiver, and a Taranis Radio Tx. \r\n\r\nAs the projects that serve as base for this are constantly evolving it is expected that something might become in-operational with newer versions of either OpenTX or APM.\r\n\r\nCurrent (October, 7th, 2014) versions of OpenTX is 2.0.12 and from APM 3.2 RC11 (Arducopter)- (previously also on 3.1.5)\r\n\r\nChanges:\r\nOctober 9th,\r\n\r\nAdded a v0.1 of DisplayAPMPosition telemetry script. It is completely self contained (except for the images and sounds).\r\n\r\nIt must me placed on a directory on the SD Card that corresponds to the model name (no spaces allowed).\r\n\r\nThis telemetry screen tries to report the data received in a easy way. \r\n\r\nDue to the restricted screen space I didn't make descriptive labels on the values but tried to group them on a logical (to me) way.\r\n\r\nAlso, this script relies heavily on voice alerts and prompts.\r\n\r\nI use a two switch combination (SWE and SWF) to change flight modes, that gives me the 6 flight modes. The combination of the 2 switches activate six Logical Switches on the Taranis - The Logical Switches MUST be L1 to L6.\r\n\r\nI could not find a way to have the Flight Controller report the settings for some parameters, like which 6 Flight Modes are defined so the script must be updated with the Flight Mode Numbers that correspond to each Logical Switch.\r\n\r\nBut the screen deserves some explanation, so here goes:\r\n\r\nA-Current Flight Mode Active as reported by the Flight Controller. If blinking the vehicle is not Armed.\r\n\r\nB-Current Flight Mode Timer. Each Flight Mode has its own timer. The timer stops if the vehicle is not Armed.\r\n\r\nC-Radio Transmitter Battery Voltage.\r\n\r\nD-RSSI value\r\n\r\nE-Estimated Flight Time. \r\n\r\nF-Available Vehicle battery capacity. \r\n\r\nE and F are inter related. When the vehicle is armed, the script checks the voltage and calculates the number of cells and estimates the status of the vehicle battery. This is then combined with the available capacity reported by the flight controller.\r\nE is calculated based on the rate of decay of reported capacity.\r\nThese are highly experimental and not to be considered real, but simple estimates.\r\n\r\nG-Actual consumed power in mAh\r\n\r\nH-Actual power output in Watts (VxA)\r\n\r\nI-Reported Flight Battery Voltage\r\n\r\nJ-Reported Flight Battery Current\r\n\r\nK-Vertical Gauge that shows the actual Throttle output (not the Throttle stick position but the actual output reported by the Flight Controller)\r\n\r\nL-Vehicle Height\r\n\r\nM-Max Height\r\n\r\nN-Vertical speed\r\n\r\nO-Vertical Speed Indicator (up or down)\r\n\r\nP-Heading\r\n\r\nQ-Roll angle\r\n\r\nR-Armed Time Timer - Starts and stops when the Vehicle is armed/disarmed\r\n\r\nS-Speed\r\n\r\nT-Pitch Indicator. When over 45 degrees the indicator is replaced by 3 up or 3 down indicators\r\n\r\nU-GPS Indicator. Three different graphics dependent on GPS status, 3D, 2D or no status\r\n\r\nV-HDop indicator. Blinks when over 2\r\n\r\nW-Number of reported satellites\r\n\r\nX-Distance to home (Distance to the point the Taranis received a good satellite fix)\r\n\r\nY-Heading to home (Heading to the point the Taranis received a good satellite fix)\r\n\r\nWhen changing flight modes the radio says Flight Mode X engaged when the switch is moved and Flight Mode X active when the Flight Controller reports it. If there is a mismatch or the Flight Controller doesn't not report the Flight Mode as set by the switches you'll be notified.\r\n\r\n\r\nChanges:\r\nOctober 7th,\r\n\r\nthe following data is being decoded on the Teensy and sent to the Taranis:\r\n\r\nData transmitted to FrSky Taranis:\r\n\r\n* Cell            ( Voltage of Cell=Cells/(Number of cells). [V]) \r\n* Cells           ( Voltage from LiPo [V] )\r\n* A2              ( HDOP value * 25 - 8 bit resolution)\r\n* A3              ( Roll angle from -Pi to +Pi radians, converted to a value between 0 and 1024)\r\n* A4              ( Pitch angle from -Pi/2 to +Pi/2 radians, converted to a value between 0 and 1024)\r\n* Alt             ( Altitude from baro.  [m] )\r\n* GAlt            ( Altitude from GPS   [m])\r\n* HDG             ( Compass heading  [deg]) v\r\n* Rpm             ( Throttle when ARMED [%] *100 + % battery remaining as reported by Mavlink)\r\n* VSpd            ( Vertical speed [m/s] )\r\n* Speed           ( Ground speed from GPS,  [km/h] )\r\n* T1              ( GPS status = ap_sat_visible*10) + ap_fixtype )\r\n* T2              ( Armed Status and Mavlink Messages :- 16 bit value: bit 1: armed - bit 2-5: severity +1 (0 means no message - bit 6-15: number representing a specific text)\r\n* Vfas            ( same as Cells )\r\n* Longitud        ( Longitud )\r\n* Latitud         ( Latitud )\r\n* Dist            ( Will be calculated by FrSky Taranis as the distance from first received lat/long = Home Position )\r\n* Fuel            ( Current Flight Mode reported by Mavlink )\r\n* AccX            ( X Axis average vibration m/s?)\r\n* AccY            ( Y Axis average vibration m/s?)\r\n* AccZ            ( Z Axis average vibration m/s?)\r\n\r\n***\r\n\r\n\r\nSeptember, 22nd\r\n- Acc X/Y/Z reports the average vibrations (difference between max/min) instead of actual accelerometer values.\r\n- Reports gps-speed instead of hud-speed.\r\n- Change how the code responds to tx telemetry requests. This fixes the missing cell/cells in the latest open-tx versions.\r\n- Updated the cell detection to minimize the risk of detecting to many cells (unless the battery is low upon connection) and changing the cell count inflight when the battery voltage drops.\r\n- Changed the averaging for voltage/current to be more accurate to the voltage/current fluctuations. Hoping of increasing the accuracy of the mAh-counter. Use FAS as both voltage/current source.\r\n- Delays sending the voltage/current until the voltage reading through mavlink has stabilized. This should minimize the false low battery-warnings upon model powerup.\r\n- GPS hdop on A2\r\n- Temp2 contains both arming status (armed if the value is uneven) and status message number if the text received through mavlink was recognized.\r\n\r\nLua scripts: Arducopter_Status\r\n\r\nMixer scripts:\r\n\r\nApmTelem.lua:\r\nThis script configures A2 for usage as hdop and exports arming-status as an output. This status can be used to for example control a timer.\r\nIt also publishes a set of methods that can be used by other scripts.\r\n\r\nApmSounds.lua: \r\nThis is a mixer script that announces (plays a soundfile) when the flightmode changes. Some flightmodes (auto-modes) will be repeated at a given intervall. \r\n\r\n\r\nLua telemetry screens:\r\n\r\ntelem1.lua: \r\nShows status of different parameters received through mavlink. \r\nSome of this parameters are current flightmode, gps status, battery status, current consumption and power usage.\r\nIt also displays (briefly) any status messages received from ardupilot.\r\n\r\ntelem2.lua:\r\nShows a log with received status messages from ardupilot. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}